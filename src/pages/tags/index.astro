---
import IndexLayout from '@/layouts/IndexLayout.astro'
import Breadcrumbs from '@/components/ui/Breadcrumbs.astro'
import type { BreadcrumbItem } from '@/components/ui/Breadcrumbs.astro'
import { themeConfig } from '@/config'
import { getCollection } from 'astro:content'
import { getCollectionKeys } from '@/collections.config'

// Get all posts from all collections
const collectionKeys = getCollectionKeys()
const allCollections = await Promise.all(
  collectionKeys.map(async (key) => {
    const posts = await getCollection(key as any)
    return posts.filter((post: any) => !post.id.startsWith('_'))
  })
)

// Also get guide posts
const guidePosts = await getCollection('posts')
const filteredGuidePosts = guidePosts.filter((post) => !post.id.startsWith('_'))

// Combine all posts
const allPosts = [...allCollections.flat(), ...filteredGuidePosts]

// Count posts per tag
const tagCounts = new Map<string, number>()

allPosts.forEach((post: any) => {
  const tags = post.data.tags || []
  tags.forEach((tag: string) => {
    tagCounts.set(tag, (tagCounts.get(tag) || 0) + 1)
  })
})

// Sort tags by count (descending) then alphabetically
const sortedTags = Array.from(tagCounts.entries())
  .sort((a, b) => {
    if (b[1] !== a[1]) return b[1] - a[1]
    return a[0].localeCompare(b[0])
  })

// Build breadcrumbs
const breadcrumbs: BreadcrumbItem[] = [
  { label: 'Home', href: '/' },
  { label: 'Tags' }
]

const totalTags = sortedTags.length
---

<IndexLayout
  title={'Tags - ' + themeConfig.site.title}
  description="Browse all tags"
  pageTitle="Tags"
>
  <main>
    <Breadcrumbs items={breadcrumbs} />
    
    <p class="total">{totalTags} {totalTags === 1 ? 'tag' : 'tags'}</p>

    {sortedTags.length > 0 ? (
      <ul class="tag-list">
        {sortedTags.map(([tag, count]) => (
          <li>
            <a href={`/tags/${tag}/`}>
              <div class="tag-item">
                <span class="tag-name">{tag}</span>
                <span class="tag-count">{count}</span>
              </div>
            </a>
          </li>
        ))}
      </ul>
    ) : (
      <p class="empty-message">No tags yet.</p>
    )}
  </main>
</IndexLayout>

<style>
  .total {
    color: var(--text-secondary);
    opacity: 0.75;
    font-size: 0.875rem;
    margin: 0 0 2rem 0;
  }

  .tag-list {
    padding: 0;
    margin: 0;
    list-style-type: none;
    display: flex;
    flex-direction: column;
    gap: 0;
  }

  .tag-list li {
    list-style: none;
  }

  .tag-list li::marker {
    display: none;
  }

  a {
    color: var(--text-primary);
    display: block;
    text-decoration: none;
    transition: opacity 0.15s ease-out;
  }

  @media (hover: hover) and (pointer: fine) {
    .tag-list:hover a {
      opacity: 0.4;
    }

    .tag-list:hover a:hover {
      opacity: 1;
    }

    .tag-list:hover a:hover .tag-count {
      color: var(--text-secondary);
      opacity: 1;
    }
  }

  .tag-item {
    height: 2.75rem;
    display: flex;
    justify-content: space-between;
    align-items: center;
    gap: 0.75rem;
    padding: 0 0.5rem;
    border-bottom: 1px solid var(--border);
  }

  .tag-name {
    margin: 0;
    flex: 1;
    font-weight: 500;
  }

  .tag-count {
    margin: 0;
    color: var(--text-secondary);
    opacity: 0.75;
    font-size: 0.875rem;
    font-variant-numeric: tabular-nums;
    flex-shrink: 0;
  }

  .empty-message {
    color: var(--text-secondary);
    opacity: 0.75;
    font-style: italic;
  }

  @media (max-width: 768px) {
    .tag-item {
      padding: 0 0.25rem;
    }
  }
</style>
