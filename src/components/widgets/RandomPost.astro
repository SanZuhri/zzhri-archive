---
import { getCollection } from 'astro:content'
import FormattedDate from '@/components/widgets/FormattedDate.astro'

// Get all posts from all collections
const collections = ['posts', 'thoughts', 'media'] as const
const allPosts = await Promise.all(
  collections.map(async (collection) => {
    const posts = await getCollection(collection)
    return posts
      .filter((post) => !post.id.startsWith('_')) // Exclude drafts
      .map((post) => ({
        ...post,
        collection
      }))
  })
)

const flatPosts = allPosts.flat()

// Select random post
const randomPost = flatPosts[Math.floor(Math.random() * flatPosts.length)]

if (!randomPost) return null

const postUrl = randomPost.collection === 'posts' ? `/${randomPost.id}/` : `/collections/${randomPost.collection}/${randomPost.id}/`
---

<div class="random-post-section">
  <p class="random-post-label">ðŸŽ² Random Post</p>
  <div class="random-post-card">
    <a href={postUrl} class="random-post-link">
      <div class="random-post-item">
        <p class="random-post-title">{randomPost.data.title}</p>
        <div class="random-post-meta">
          <span class="random-post-collection">{randomPost.collection}</span>
          <span class="random-post-separator">Â·</span>
          <span class="random-post-date">
            <FormattedDate date={randomPost.data.pubDate} context="list" />
          </span>
        </div>
      </div>
    </a>
  </div>
</div>

<style>
  .random-post-section {
    margin: 2rem 0;
  }

  .random-post-label {
    margin: 0 0 0.75rem 0;
    font-size: 0.9rem;
    font-weight: var(--font-weight-normal);
    color: var(--text-secondary);
    opacity: 0.75;
    text-transform: uppercase;
    letter-spacing: 0.05em;
  }

  .random-post-card {
    border: 1px solid var(--border);
    border-radius: 0.5rem;
    background: var(--bg-primary);
    overflow: hidden;
    transition: border-color 0.2s ease;
  }

  .random-post-card:hover {
    border-color: var(--text-secondary);
  }

  .random-post-link {
    display: block;
    text-decoration: none;
    color: inherit;
    padding: 1.5rem;
  }

  .random-post-item {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
  }

  .random-post-title {
    margin: 0;
    font-size: 1.1rem;
    font-weight: var(--font-weight-bold);
    color: var(--text-primary);
    line-height: 1.3;
  }

  .random-post-meta {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    font-size: 0.9rem;
    color: var(--text-secondary);
    opacity: 0.75;
  }

  .random-post-collection {
    text-transform: capitalize;
    font-weight: var(--font-weight-normal);
  }

  .random-post-separator {
    font-weight: var(--font-weight-bold);
  }

  .random-post-date {
    font-weight: var(--font-weight-normal);
  }

  @media (max-width: 600px) {
    .random-post-section {
      margin: 1.5rem 0;
    }

    .random-post-label {
      font-size: 0.8rem;
      margin-bottom: 0.5rem;
    }

    .random-post-link {
      padding: 1rem;
    }

    .random-post-title {
      font-size: 1rem;
    }
  }
</style>