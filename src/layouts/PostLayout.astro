---
import '@/styles/global.css'
import type { PostLayoutProps } from '@/types'
import FormattedDate from '@/components/widgets/FormattedDate.astro'
import FootnoteScroll from '@/components/widgets/FootnoteScroll.astro'
import BaseHead from '@/components/layout/BaseHead.astro'
import Footer from '@/components/layout/Footer.astro'
import BackButton from '@/components/ui/BackButton.astro'
import TableOfContents from '@/components/ui/TableOfContents.astro'
import GradientMask from '@/components/ui/GradientMask.astro'
import ImageOptimizer from '@/components/ui/ImageOptimizer.astro'
import ImageViewer from '@/components/ui/ImageViewer.astro'
import GitHubCard from '@/components/ui/GitHubCard.astro'
import LinkCard from '@/components/ui/LinkCard.astro'
import NeoDBCard from '@/components/ui/NeoDBCard.astro'
import CopyCode from '@/components/ui/CopyCode.astro'
import GestureNavigation from '@/components/ui/GestureNavigation.astro'
import PostNavigation from '@/components/ui/PostNavigation.astro'
import ReadingProgress from '@/components/ui/ReadingProgress.astro'
import ThemeToggle from '@/components/ui/ThemeToggle.astro'
import XPOST from '@/components/ui/XPOST.astro'
import TagBadge from '@/components/ui/TagBadge.astro'
import MobileBottomNav from '@/components/ui/MobileBottomNav.astro'
import BaseLayout from '@/layouts/BaseLayout.astro'

import { themeConfig } from '@/config'

interface Props extends PostLayoutProps {
  backUrl?: string
  backLabel?: string
  tags?: string[]
}

const {
  title,
  pubDate,
  readingTime,
  toc,
  backUrl = '/',
  backLabel = 'index',
  tags = []
} = Astro.props

const postSlug = Astro.url.pathname.split('/').filter(Boolean).pop() || ''
const ogImage = `/open-graph/${postSlug}.png`

// Determine collection
let collection = 'posts'
if (backUrl !== '/') {
  const match = backUrl.match(/\/collections\/([^/]+)/)
  if (match) {
    collection = match[1]
  }
}
---

<BaseLayout
  title={`${title} · ${themeConfig.site.title}`}
  description={themeConfig.site.description}
  type="post"
>
  <BaseHead
    title={`${title} · ${themeConfig.site.title}`}
    description={themeConfig.site.description}
    ogImage={ogImage}
    slot="head"
  />
  <ReadingProgress />
  <div class="post-container">
    <main>
      <div class="prose">
        <GradientMask />
        <BackButton backUrl={backUrl} backLabel={backLabel} />
        {themeConfig.post.toc && <TableOfContents toc={toc} />}
        <div class="title">
          <h1>{title}</h1>
          <div class="meta">
            <div class="date">
              <FormattedDate date={pubDate} context="post" />
              {
                themeConfig.post.readingTime && readingTime && (
                  <span class="reading-time">
                    <span class="separator">·</span>
                    {readingTime.text}
                  </span>
                )
              }
            </div>
            <div class="utilities">
              <ThemeToggle />
            </div>
          </div>
          {
            tags && tags.length > 0 && (
              <div class="tags-container">
                {tags.map((tag) => (
                  <TagBadge tag={tag} />
                ))}
              </div>
            )
          }
        </div>
        <slot />
        <PostNavigation collection={collection} currentSlug={postSlug} />
      </div>
    </main>
    <GestureNavigation />
    <ImageOptimizer />
    <FootnoteScroll />
    <CopyCode />
    <GitHubCard />
    <XPOST />
    <NeoDBCard />
    {themeConfig.post.imageViewer && <ImageViewer />}
    {themeConfig.post.linkCard && <LinkCard />}
    {themeConfig.general.footer && <Footer />}
  </div>
  <MobileBottomNav />
</BaseLayout>

<style>
  .post-container {
    display: flex;
    flex-direction: column;
    flex: 1;
  }

  .post-container main {
    flex: 1;
  }

  .meta {
    display: flex;
    justify-content: space-between;
    align-items: center;
    gap: 1rem;
    flex-wrap: wrap;
  }

  .utilities {
    display: flex;
    align-items: center;
    gap: 0.75rem;
  }

  .tags-container {
    display: flex;
    flex-wrap: wrap;
    gap: 0.375rem;
    margin-top: 1rem;
  }

  @media (max-width: 768px) {
    .meta {
      flex-direction: column;
      align-items: flex-start;
    }

    .tags-container {
      margin-top: 0.75rem;
    }
  }
</style>
